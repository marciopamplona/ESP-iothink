#!/usr/bin/env python3

import argparse
import json
import sys
import config
import esp
import pydoc

parser = argparse.ArgumentParser(description='ESPEasy testing framework', epilog=pydoc.render_doc(esp.Esp), formatter_class=argparse.RawDescriptionHelpFormatter)

# parser.add_argument('--url', default='http://localhost:8080/rpc', help='url of rpc server to connect to. default: %(default)s')
# parser.add_argument('--user', default=None, help='user to login.')
# parser.add_argument('--password', default=None, help='password.')
# parser.add_argument('--api_key', default=None, help='api_key, use instead of password to overrule all logins globally')
# parser.add_argument('--upload', default=None, help='File to upload')
# parser.add_argument('--json', action='store_true', help='interpret parameters as raw JSON data. (usefull when you want to pass complexer data type like subarrays or dicts) dont forget to use single quotes around the json string.')
# parser.add_argument('--short', action='store_true', help='return short single-line JSON output (for scripting)')
# parser.add_argument('--verbose', action='store_true', help='request verbose mode (module help output)')
# parser.add_argument('--insecure', action='store_true', help='dont verify SSL certificates. (use with self-signed certificates)')
parser.add_argument('command',      nargs=1, help='Function from the Esp class to run (help below)')
parser.add_argument('unit',         type=int,nargs=1, help='Unit number (from config)')
parser.add_argument('params',  default=[], nargs='*', help='command parameters. in foo=bar form ')

args = parser.parse_args()

try:
    if args.unit[0]<1:
        raise(Exception("unit number should be 1 or higher"))


    unit=args.unit[0]-1

    config.units[unit]['unit']=args.unit[0]
    e=esp.Esp(config.units[unit])

    #determine rpc parameters
    params={}
    for param in args.params:
        (key,value)=param.split("=")
        params[key]=value

    command = getattr(e, args.command[0])
    command(**params)

    sys.exit(0)

except Exception as e:
    print("Error: "+str(e), file=sys.stderr)
    print()
    print("Details:")
    raise
    sys.exit(1)
